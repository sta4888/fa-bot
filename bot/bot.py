import logging
import os
from datetime import datetime, date
from aiogram import Bot, Dispatcher, types, F
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram_calendar import SimpleCalendar, DialogCalendar
from dotenv import load_dotenv
import asyncio

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

API_TOKEN = os.getenv('API_TOKEN')

logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –°–ø–∏—Å–æ–∫ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤
CITIES = [
    "–ú–æ—Å–∫–≤–∞", "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", "–ö–∞–∑–∞–Ω—å", "–°–æ—á–∏", "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥",
    "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫", "–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä", "–ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥", "–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫"
]

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class FlightForm(StatesGroup):
    waiting_for_departure = State()
    waiting_for_destination = State()
    waiting_for_departure_date = State()
    waiting_for_return_date = State()
    waiting_for_passengers = State()

# –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –≥–æ—Ä–æ–¥–∞–º–∏
def get_cities_keyboard():
    buttons = [[InlineKeyboardButton(text=city, callback_data=f"city_{city}")] for city in CITIES]
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    return keyboard

@dp.message(Command("start"))
async def send_welcome(message: types.Message):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[[
            InlineKeyboardButton(text="üîç –ü–æ–∏—Å–∫ –∞–≤–∏–∞–±–∏–ª–µ—Ç–æ–≤", callback_data="search_tickets")
        ]]
    )
    
    await message.reply(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –≤–∞–º –Ω–∞–π—Ç–∏ –∞–≤–∏–∞–±–∏–ª–µ—Ç—ã! üõ´\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫.",
        reply_markup=keyboard
    )

@dp.callback_query(F.data == "search_tickets")
async def process_search_tickets(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer()
    await callback_query.message.edit_text(
        "–û—Ç–∫—É–¥–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–ª–µ—Ç–µ—Ç—å? –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
        reply_markup=get_cities_keyboard()
    )
    await state.set_state(FlightForm.waiting_for_departure)

@dp.callback_query(F.data.startswith("city_"), FlightForm.waiting_for_departure)
async def process_departure_city(callback_query: types.CallbackQuery, state: FSMContext):
    departure_city = callback_query.data.replace('city_', '')
    await state.update_data(departure_city=departure_city)
    
    await callback_query.message.edit_text(
        f"–û—Ç–ª–∏—á–Ω–æ! –í—ã–ª–µ—Ç –∏–∑ –≥–æ—Ä–æ–¥–∞: {departure_city}\n\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –ø—Ä–∏–±—ã—Ç–∏—è:",
        reply_markup=get_cities_keyboard()
    )
    await state.set_state(FlightForm.waiting_for_destination)

@dp.callback_query(F.data.startswith("city_"), FlightForm.waiting_for_destination)
async def process_destination_city(callback_query: types.CallbackQuery, state: FSMContext):
    destination_city = callback_query.data.replace('city_', '')
    await state.update_data(destination_city=destination_city)
    
    calendar = DialogCalendar(locale='ru')  # –¥–æ–±–∞–≤–ª—è–µ–º –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—é
    await callback_query.message.edit_text(
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –≤—ã–ª–µ—Ç–∞:",
        reply_markup=await calendar.start_calendar()
    )
    await state.set_state(FlightForm.waiting_for_departure_date)

# –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö callback_query
@dp.callback_query()
async def process_all_callbacks(callback_query: types.CallbackQuery, state: FSMContext):
    current_state = await state.get_state()
    logging.info(f"Received callback with data: {callback_query.data}, state: {current_state}")
    
    if current_state == FlightForm.waiting_for_departure_date.state:
        calendar = DialogCalendar(locale='ru')
        selected, date = await calendar.process_selection(callback_query)
        if selected:
            await state.update_data(departure_date=date)
            calendar = DialogCalendar(locale='ru')
            await callback_query.message.edit_text(
                '–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è:',
                reply_markup=await calendar.start_calendar()
            )
            await state.set_state(FlightForm.waiting_for_return_date)
    
    elif current_state == FlightForm.waiting_for_return_date.state:
        calendar = DialogCalendar(locale='ru')
        selected, date = await calendar.process_selection(callback_query)
        if selected:
            await state.update_data(return_date=date)
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤
            buttons = [[InlineKeyboardButton(text=str(i), callback_data=f"passengers_{i}") for i in range(1, 5)],
                      [InlineKeyboardButton(text=str(i), callback_data=f"passengers_{i}") for i in range(5, 9)]]
            keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
            
            await callback_query.message.edit_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤:",
                reply_markup=keyboard
            )
            await state.set_state(FlightForm.waiting_for_passengers)
    
    elif current_state == FlightForm.waiting_for_passengers.state and callback_query.data.startswith("passengers_"):
        passengers = int(callback_query.data.replace('passengers_', ''))
        user_data = await state.get_data()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        summary = (
            f"‚úàÔ∏è –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–∏—Å–∫ –±–∏–ª–µ—Ç–æ–≤:\n\n"
            f"üõ´ –û—Ç–∫—É–¥–∞: {user_data['departure_city']}\n"
            f"üõ¨ –ö—É–¥–∞: {user_data['destination_city']}\n"
            f"üìÖ –î–∞—Ç–∞ –≤—ã–ª–µ—Ç–∞: {user_data['departure_date'].strftime('%d.%m.%Y')}\n"
            f"üìÖ –î–∞—Ç–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è: {user_data['return_date'].strftime('%d.%m.%Y')}\n"
            f"üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤: {passengers}\n\n"
            f"üîÑ –ò–¥–µ—Ç –ø–æ–∏—Å–∫ –±–∏–ª–µ—Ç–æ–≤..."
        )
        
        await callback_query.message.edit_text(summary)
        await state.clear()
    
    # –ù–µ –∑–∞–±—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ callback_query
    await callback_query.answer()

async def main():
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())